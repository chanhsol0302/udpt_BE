package security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.UUID;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secretKey;

    @Value("${jwt.expirationMs}")
    private long expirationMs;

    public String generateToken(String username, UUID userId, String role) {
        // Kiểm tra và xử lý trường hợp secretKey null hoặc rỗng
        if (secretKey == null || secretKey.isEmpty()) {
            throw new IllegalArgumentException("JWT secret key is not configured.");
        }

        return Jwts.builder()
            .setSubject(username) // Thường là email hoặc username
            .claim("user_id", userId.toString()) // Lưu userId vào claims
            .claim("role", role) // Lưu role vào claims
            .setIssuedAt(new Date()) // Thời gian tạo token
            .setExpiration(new Date(System.currentTimeMillis() + expirationMs)) // Thời gian hết hạn
            .signWith(SignatureAlgorithm.HS512, secretKey) // Ký token bằng thuật toán HS512 và secret key
            .compact(); // Nén thành chuỗi JWT
    }

    public Claims parseToken(String token) throws Exception {
        // Kiểm tra và xử lý trường hợp secretKey null hoặc rỗng
        if (secretKey == null || secretKey.isEmpty()) {
            throw new IllegalArgumentException("JWT secret key is not configured.");
        }
        try {
            return Jwts.parser()
                .setSigningKey(secretKey) // Dùng secret key để giải mã
                .parseClaimsJws(token)
                .getBody(); // Lấy phần body chứa claims
        } catch (Exception e) {
            // Có thể log lỗi chi tiết hơn ở đây
            System.err.println("Error parsing JWT token: " + e.getMessage());
            throw new Exception("Invalid JWT token", e);
        }
    }
}