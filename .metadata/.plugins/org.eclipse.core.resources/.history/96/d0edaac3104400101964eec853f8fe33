package com.example.patientservice.security;

import com.example.patientservice.security.jwt.JwtAuthEntryPoint;
import com.example.patientservice.security.jwt.JwtAuthFilter;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

// Đánh dấu lớp này là lớp cấu hình
@Configuration
// Kích hoạt tính năng bảo mật web của Spring boot
@EnableWebSecurity
public class SecurityConfig {
	// Inject JwtAuthFilter
	@Autowired
	private JwtAuthFilter jwtAuthFilter;
	
	// Inject JwtAuthEntryPoint để xử lý lỗi xác thực
	@Autowired
	private JwtAuthEntryPoint unauthorizedHandler;
	
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Tắt CSRF cho API (phổ biến trong REST API)
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/patients").permitAll() // Cho phép endpoint tạo patient mà không cần auth
                	.requestMatchers("/api/patients/user/{userId}").permitAll()
                .anyRequest().authenticated() // Mặc định yêu cầu xác thực cho tất cả các request khác
            )
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)); // Không dùng session

        return http.build();
    }
}